name: 'build-test-release'
on:
  pull_request:
  push:
    branches:
      - main
      - 'releases/*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          npm install
      - run: |
          npm run all
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./
        id: go-version
        with:
          working-directory: ./__tests__/testdata
      - run: |
          test '${{ steps.go-version.outputs.module }}' == 'example.com/go/testmodule'
      - run: |
          test '${{ steps.go-version.outputs.minimal }}' == '1.13'
      - run: |
          test '${{ steps.go-version.outputs.latest }}' == '1.16'
      - run: |
          test '${{ steps.go-version.outputs.matrix }}' == '["1.16","1.15","1.14","1.13"]'
  release:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Rebuild dist
        run: |
          npm install
          npm run build
          npm run package
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add dist/index.js
          git commit -m "Publish dist" || echo "Nothing to commit"
          git push origin main
      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.35.0
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch
      - name: Create release
        if: ${{ steps.version.outputs.new_tag }} != ""
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          release_name: Release ${{ steps.version.outputs.new_tag }}
          draft: false
          prerelease: false
      - name: Major version tag
        id: major-version
        if: ${{ steps.version.outputs.new_tag }} != ""
        uses: actions/github-script@v4.0.2
        with:
          script: |
            core.setOutput('tag', '${{ steps.version.outputs.new_tag }}'.split('.')[0])
      - name: Tag ${{ steps.major-version.outputs.tag }}
        if: ${{ steps.version.outputs.new_tag }} != ""
        run: |
          git tag --force ${{ steps.major-version.outputs.tag }}
          git push origin ${{ steps.major-version.outputs.tag }} --force
